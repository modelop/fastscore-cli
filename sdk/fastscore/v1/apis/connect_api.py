# coding: utf-8

"""
    FastScore API (proxy)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ConnectApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def active_sensor_attach(self, instance, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_attach(instance, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param object desc: sensor descriptor (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_attach_with_http_info(instance, desc, **kwargs)
        else:
            (data) = self.active_sensor_attach_with_http_info(instance, desc, **kwargs)
            return data

    def active_sensor_attach_with_http_info(self, instance, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_attach_with_http_info(instance, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param object desc: sensor descriptor (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_attach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_attach`")
        # verify the required parameter 'desc' is set
        if ('desc' not in params) or (params['desc'] is None):
            raise ValueError("Missing the required parameter `desc` when calling `active_sensor_attach`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'desc' in params:
            body_params = params['desc']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_available(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_available(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_available_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_sensor_available_with_http_info(instance, **kwargs)
            return data

    def active_sensor_available_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_available_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_available" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_available`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor/available', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_describe(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_describe(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: The identifier of the sensor connection (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_describe_with_http_info(instance, tap_id, **kwargs)
        else:
            (data) = self.active_sensor_describe_with_http_info(instance, tap_id, **kwargs)
            return data

    def active_sensor_describe_with_http_info(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_describe_with_http_info(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: The identifier of the sensor connection (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'tap_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_describe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_describe`")
        # verify the required parameter 'tap_id' is set
        if ('tap_id' not in params) or (params['tap_id'] is None):
            raise ValueError("Missing the required parameter `tap_id` when calling `active_sensor_describe`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'tap_id' in params:
            path_params['tap-id'] = params['tap_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor/{tap-id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_detach(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_detach(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: The identifier of the sensor connection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_detach_with_http_info(instance, tap_id, **kwargs)
        else:
            (data) = self.active_sensor_detach_with_http_info(instance, tap_id, **kwargs)
            return data

    def active_sensor_detach_with_http_info(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_detach_with_http_info(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: The identifier of the sensor connection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'tap_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_detach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_detach`")
        # verify the required parameter 'tap_id' is set
        if ('tap_id' not in params) or (params['tap_id'] is None):
            raise ValueError("Missing the required parameter `tap_id` when calling `active_sensor_detach`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'tap_id' in params:
            path_params['tap-id'] = params['tap_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor/{tap-id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_list(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_list(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[InlineResponse200]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_list_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_sensor_list_with_http_info(instance, **kwargs)
            return data

    def active_sensor_list_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_list_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[InlineResponse200]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_list`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse200]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def config_get(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.config_get(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str q: Request only the named section
        :param str accept: Force Accept header value
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.config_get_with_http_info(instance, **kwargs)
        else:
            (data) = self.config_get_with_http_info(instance, **kwargs)
            return data

    def config_get_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.config_get_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str q: Request only the named section
        :param str accept: Force Accept header value
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'q', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `config_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/x-yaml', 'application/json', 'text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/config', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def config_put(self, instance, config, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.config_put(instance, config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str config: The FastScore Configuration (required)
        :param str content_type: configuration MIME type
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.config_put_with_http_info(instance, config, **kwargs)
        else:
            (data) = self.config_put_with_http_info(instance, config, **kwargs)
            return data

    def config_put_with_http_info(self, instance, config, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.config_put_with_http_info(instance, config, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str config: The FastScore Configuration (required)
        :param str content_type: configuration MIME type
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'config', 'content_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `config_put`")
        # verify the required parameter 'config' is set
        if ('config' not in params) or (params['config'] is None):
            raise ValueError("Missing the required parameter `config` when calling `config_put`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'config' in params:
            body_params = params['config']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/config', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def connect_get(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.connect_get(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str name: Return info for the named service only
        :param str api: Return only services providing the named API
        :param str host: Return only services running on the named host
        :param int port: Return only services that use this port
        :param str release: Return only services that run the specific release
        :param str health: Return only services with the given health status
        :param str _return: A comma-separated list of fields to return
        :return: list[InstanceInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.connect_get_with_http_info(instance, **kwargs)
        else:
            (data) = self.connect_get_with_http_info(instance, **kwargs)
            return data

    def connect_get_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.connect_get_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str name: Return info for the named service only
        :param str api: Return only services providing the named API
        :param str host: Return only services running on the named host
        :param int port: Return only services that use this port
        :param str release: Return only services that run the specific release
        :param str health: Return only services with the given health status
        :param str _return: A comma-separated list of fields to return
        :return: list[InstanceInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'name', 'api', 'host', 'port', 'release', 'health', '_return']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connect_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `connect_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))
        if 'api' in params:
            query_params.append(('api', params['api']))
        if 'host' in params:
            query_params.append(('host', params['host']))
        if 'port' in params:
            query_params.append(('port', params['port']))
        if 'release' in params:
            query_params.append(('release', params['release']))
        if 'health' in params:
            query_params.append(('health', params['health']))
        if '_return' in params:
            query_params.append(('return', params['_return']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/connect', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InstanceInfo]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def health_get(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.health_get(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: HealthInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.health_get_with_http_info(instance, **kwargs)
        else:
            (data) = self.health_get_with_http_info(instance, **kwargs)
            return data

    def health_get_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.health_get_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: HealthInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method health_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `health_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/health', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HealthInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def swagger_get(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.swagger_get(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str accept: Force Accept header value
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.swagger_get_with_http_info(instance, **kwargs)
        else:
            (data) = self.swagger_get_with_http_info(instance, **kwargs)
            return data

    def swagger_get_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.swagger_get_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str accept: Force Accept header value
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method swagger_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `swagger_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/x-yaml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/swagger', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
