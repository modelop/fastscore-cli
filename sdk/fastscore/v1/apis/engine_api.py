# coding: utf-8

"""
    FastScore API (proxy)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EngineApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def active_sensor_attach(self, instance, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_attach(instance, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param object desc: sensor descriptor (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_attach_with_http_info(instance, desc, **kwargs)
        else:
            (data) = self.active_sensor_attach_with_http_info(instance, desc, **kwargs)
            return data

    def active_sensor_attach_with_http_info(self, instance, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_attach_with_http_info(instance, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param object desc: sensor descriptor (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_attach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_attach`")
        # verify the required parameter 'desc' is set
        if ('desc' not in params) or (params['desc'] is None):
            raise ValueError("Missing the required parameter `desc` when calling `active_sensor_attach`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'desc' in params:
            body_params = params['desc']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_available(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_available(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_available_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_sensor_available_with_http_info(instance, **kwargs)
            return data

    def active_sensor_available_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_available_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_available" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_available`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor/available', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_describe(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_describe(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: The identifier of the sensor connection (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_describe_with_http_info(instance, tap_id, **kwargs)
        else:
            (data) = self.active_sensor_describe_with_http_info(instance, tap_id, **kwargs)
            return data

    def active_sensor_describe_with_http_info(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_describe_with_http_info(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: The identifier of the sensor connection (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'tap_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_describe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_describe`")
        # verify the required parameter 'tap_id' is set
        if ('tap_id' not in params) or (params['tap_id'] is None):
            raise ValueError("Missing the required parameter `tap_id` when calling `active_sensor_describe`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'tap_id' in params:
            path_params['tap-id'] = params['tap_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor/{tap-id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_detach(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_detach(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: The identifier of the sensor connection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_detach_with_http_info(instance, tap_id, **kwargs)
        else:
            (data) = self.active_sensor_detach_with_http_info(instance, tap_id, **kwargs)
            return data

    def active_sensor_detach_with_http_info(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_detach_with_http_info(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: The identifier of the sensor connection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'tap_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_detach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_detach`")
        # verify the required parameter 'tap_id' is set
        if ('tap_id' not in params) or (params['tap_id'] is None):
            raise ValueError("Missing the required parameter `tap_id` when calling `active_sensor_detach`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'tap_id' in params:
            path_params['tap-id'] = params['tap_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor/{tap-id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_list(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_list(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[InlineResponse200]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_list_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_sensor_list_with_http_info(instance, **kwargs)
            return data

    def active_sensor_list_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_list_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[InlineResponse200]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_list`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse200]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def health_get(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.health_get(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: HealthInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.health_get_with_http_info(instance, **kwargs)
        else:
            (data) = self.health_get_with_http_info(instance, **kwargs)
            return data

    def health_get_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.health_get_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: HealthInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method health_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `health_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/health', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HealthInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def input_stream_set(self, instance, stream, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.input_stream_set(instance, stream, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param object stream: The input stream descriptor (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.input_stream_set_with_http_info(instance, stream, **kwargs)
        else:
            (data) = self.input_stream_set_with_http_info(instance, stream, **kwargs)
            return data

    def input_stream_set_with_http_info(self, instance, stream, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.input_stream_set_with_http_info(instance, stream, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param object stream: The input stream descriptor (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'stream']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method input_stream_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `input_stream_set`")
        # verify the required parameter 'stream' is set
        if ('stream' not in params) or (params['stream'] is None):
            raise ValueError("Missing the required parameter `stream` when calling `input_stream_set`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stream' in params:
            body_params = params['stream']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/stream/in', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def job_delete(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_delete(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.job_delete_with_http_info(instance, **kwargs)
        else:
            (data) = self.job_delete_with_http_info(instance, **kwargs)
            return data

    def job_delete_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_delete_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `job_delete`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def job_io_input(self, instance, data, slot, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_io_input(instance, data, slot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str data: Input data (required)
        :param str slot: The stream slot (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.job_io_input_with_http_info(instance, data, slot, **kwargs)
        else:
            (data) = self.job_io_input_with_http_info(instance, data, slot, **kwargs)
            return data

    def job_io_input_with_http_info(self, instance, data, slot, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_io_input_with_http_info(instance, data, slot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str data: Input data (required)
        :param str slot: The stream slot (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'data', 'slot']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_io_input" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `job_io_input`")
        # verify the required parameter 'data' is set
        if ('data' not in params) or (params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `job_io_input`")
        # verify the required parameter 'slot' is set
        if ('slot' not in params) or (params['slot'] is None):
            raise ValueError("Missing the required parameter `slot` when calling `job_io_input`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'slot' in params:
            path_params['slot'] = params['slot']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/input/{slot}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def job_io_input0(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_io_input0(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.job_io_input0_with_http_info(instance, **kwargs)
        else:
            (data) = self.job_io_input0_with_http_info(instance, **kwargs)
            return data

    def job_io_input0_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_io_input0_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_io_input0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `job_io_input0`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/input', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def job_io_output(self, instance, slot, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_io_output(instance, slot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str slot: The stream slot (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.job_io_output_with_http_info(instance, slot, **kwargs)
        else:
            (data) = self.job_io_output_with_http_info(instance, slot, **kwargs)
            return data

    def job_io_output_with_http_info(self, instance, slot, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_io_output_with_http_info(instance, slot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str slot: The stream slot (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'slot']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_io_output" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `job_io_output`")
        # verify the required parameter 'slot' is set
        if ('slot' not in params) or (params['slot'] is None):
            raise ValueError("Missing the required parameter `slot` when calling `job_io_output`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'slot' in params:
            path_params['slot'] = params['slot']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/output/{slot}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def job_io_output1(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_io_output1(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.job_io_output1_with_http_info(instance, **kwargs)
        else:
            (data) = self.job_io_output1_with_http_info(instance, **kwargs)
            return data

    def job_io_output1_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_io_output1_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_io_output1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `job_io_output1`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/output', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def job_sample_cpu(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_sample_cpu(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int duration: The number of seconds to sample CPU usage for
        :return: CpuUsageInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.job_sample_cpu_with_http_info(instance, **kwargs)
        else:
            (data) = self.job_sample_cpu_with_http_info(instance, **kwargs)
            return data

    def job_sample_cpu_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_sample_cpu_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int duration: The number of seconds to sample CPU usage for
        :return: CpuUsageInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'duration']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_sample_cpu" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `job_sample_cpu`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []
        if 'duration' in params:
            query_params.append(('duration', params['duration']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/sample/cpu', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CpuUsageInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def job_scale(self, instance, n, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_scale(instance, n, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int n: The number of jets to scale model to (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.job_scale_with_http_info(instance, n, **kwargs)
        else:
            (data) = self.job_scale_with_http_info(instance, n, **kwargs)
            return data

    def job_scale_with_http_info(self, instance, n, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_scale_with_http_info(instance, n, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int n: The number of jets to scale model to (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'n']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_scale" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `job_scale`")
        # verify the required parameter 'n' is set
        if ('n' not in params) or (params['n'] is None):
            raise ValueError("Missing the required parameter `n` when calling `job_scale`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []
        if 'n' in params:
            query_params.append(('n', params['n']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/scale', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def job_state_restore(self, instance, state, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_state_restore(instance, state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str state: The model state blob (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.job_state_restore_with_http_info(instance, state, **kwargs)
        else:
            (data) = self.job_state_restore_with_http_info(instance, state, **kwargs)
            return data

    def job_state_restore_with_http_info(self, instance, state, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_state_restore_with_http_info(instance, state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str state: The model state blob (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'state']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_state_restore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `job_state_restore`")
        # verify the required parameter 'state' is set
        if ('state' not in params) or (params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `job_state_restore`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'state' in params:
            body_params = params['state']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/state', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def job_status(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_status(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str _return: A comma-separated list of field names (slots, jets, snapshots, state)
        :return: ManifoldInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.job_status_with_http_info(instance, **kwargs)
        else:
            (data) = self.job_status_with_http_info(instance, **kwargs)
            return data

    def job_status_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.job_status_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str _return: A comma-separated list of field names (slots, jets, snapshots, state)
        :return: ManifoldInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', '_return']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method job_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `job_status`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []
        if '_return' in params:
            query_params.append(('return', params['_return']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/status', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ManifoldInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def model_load(self, instance, data, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.model_load(instance, data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str data: model+attachments (required)
        :param bool dry_run: verificaton only
        :param str content_type: model MIME type
        :param str content_disposition: pass model name
        :return: VerifyInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.model_load_with_http_info(instance, data, **kwargs)
        else:
            (data) = self.model_load_with_http_info(instance, data, **kwargs)
            return data

    def model_load_with_http_info(self, instance, data, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.model_load_with_http_info(instance, data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str data: model+attachments (required)
        :param bool dry_run: verificaton only
        :param str content_type: model MIME type
        :param str content_disposition: pass model name
        :return: VerifyInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'data', 'dry_run', 'content_type', 'content_disposition']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method model_load" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `model_load`")
        # verify the required parameter 'data' is set
        if ('data' not in params) or (params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `model_load`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []
        if 'dry_run' in params:
            query_params.append(('dry-run', params['dry_run']))

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']
        if 'content_disposition' in params:
            header_params['Content-Disposition'] = params['content_disposition']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/model', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerifyInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def model_unload(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.model_unload(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.model_unload_with_http_info(instance, **kwargs)
        else:
            (data) = self.model_unload_with_http_info(instance, **kwargs)
            return data

    def model_unload_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.model_unload_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method model_unload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `model_unload`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/model', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def output_stream_set(self, instance, stream, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.output_stream_set(instance, stream, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str stream: The output stream descriptor (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.output_stream_set_with_http_info(instance, stream, **kwargs)
        else:
            (data) = self.output_stream_set_with_http_info(instance, stream, **kwargs)
            return data

    def output_stream_set_with_http_info(self, instance, stream, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.output_stream_set_with_http_info(instance, stream, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str stream: The output stream descriptor (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'stream']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method output_stream_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `output_stream_set`")
        # verify the required parameter 'stream' is set
        if ('stream' not in params) or (params['stream'] is None):
            raise ValueError("Missing the required parameter `stream` when calling `output_stream_set`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stream' in params:
            body_params = params['stream']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/stream/out', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def policy_get(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.policy_get(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str accept: Force Accept header value
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.policy_get_with_http_info(instance, **kwargs)
        else:
            (data) = self.policy_get_with_http_info(instance, **kwargs)
            return data

    def policy_get_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.policy_get_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str accept: Force Accept header value
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policy_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `policy_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/policy', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def policy_put(self, instance, policy, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.policy_put(instance, policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str policy: The policy content (required)
        :param bool preinstall: preinstall all libs
        :param str content_type: model MIME type
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.policy_put_with_http_info(instance, policy, **kwargs)
        else:
            (data) = self.policy_put_with_http_info(instance, policy, **kwargs)
            return data

    def policy_put_with_http_info(self, instance, policy, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.policy_put_with_http_info(instance, policy, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str policy: The policy content (required)
        :param bool preinstall: preinstall all libs
        :param str content_type: model MIME type
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'policy', 'preinstall', 'content_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method policy_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `policy_put`")
        # verify the required parameter 'policy' is set
        if ('policy' not in params) or (params['policy'] is None):
            raise ValueError("Missing the required parameter `policy` when calling `policy_put`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []
        if 'preinstall' in params:
            query_params.append(('preinstall', params['preinstall']))

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'policy' in params:
            body_params = params['policy']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/policy', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def scoop_debug_output(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.scoop_debug_output(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.scoop_debug_output_with_http_info(instance, **kwargs)
        else:
            (data) = self.scoop_debug_output_with_http_info(instance, **kwargs)
            return data

    def scoop_debug_output_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.scoop_debug_output_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scoop_debug_output" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `scoop_debug_output`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/debug/output', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_attach(self, instance, slot, stream, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_attach(instance, slot, stream, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str slot: The stream slot (required)
        :param str stream: The input/output stream descriptor (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_attach_with_http_info(instance, slot, stream, **kwargs)
        else:
            (data) = self.stream_attach_with_http_info(instance, slot, stream, **kwargs)
            return data

    def stream_attach_with_http_info(self, instance, slot, stream, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_attach_with_http_info(instance, slot, stream, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str slot: The stream slot (required)
        :param str stream: The input/output stream descriptor (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'slot', 'stream']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_attach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `stream_attach`")
        # verify the required parameter 'slot' is set
        if ('slot' not in params) or (params['slot'] is None):
            raise ValueError("Missing the required parameter `slot` when calling `stream_attach`")
        # verify the required parameter 'stream' is set
        if ('stream' not in params) or (params['stream'] is None):
            raise ValueError("Missing the required parameter `stream` when calling `stream_attach`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'slot' in params:
            path_params['slot'] = params['slot']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stream' in params:
            body_params = params['stream']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/job/stream/{slot}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_rate(self, instance, stream, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_rate(instance, stream, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str stream: The stream descriptor to measure data rate (required)
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_rate_with_http_info(instance, stream, **kwargs)
        else:
            (data) = self.stream_rate_with_http_info(instance, stream, **kwargs)
            return data

    def stream_rate_with_http_info(self, instance, stream, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_rate_with_http_info(instance, stream, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str stream: The stream descriptor to measure data rate (required)
        :return: list[InlineResponse2003]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'stream']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_rate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `stream_rate`")
        # verify the required parameter 'stream' is set
        if ('stream' not in params) or (params['stream'] is None):
            raise ValueError("Missing the required parameter `stream` when calling `stream_rate`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'stream' in params:
            body_params = params['stream']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/stream/rate', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse2003]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_sample(self, instance, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_sample(instance, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str desc: The stream descriptor to get sample data from (required)
        :param int n: The number of data items to read from the stream
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_sample_with_http_info(instance, desc, **kwargs)
        else:
            (data) = self.stream_sample_with_http_info(instance, desc, **kwargs)
            return data

    def stream_sample_with_http_info(self, instance, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_sample_with_http_info(instance, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str desc: The stream descriptor to get sample data from (required)
        :param int n: The number of data items to read from the stream
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'desc', 'n']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_sample" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `stream_sample`")
        # verify the required parameter 'desc' is set
        if ('desc' not in params) or (params['desc'] is None):
            raise ValueError("Missing the required parameter `desc` when calling `stream_sample`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []
        if 'n' in params:
            query_params.append(('n', params['n']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'desc' in params:
            body_params = params['desc']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/stream/sample', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def swagger_get(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.swagger_get(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str accept: Force Accept header value
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.swagger_get_with_http_info(instance, **kwargs)
        else:
            (data) = self.swagger_get_with_http_info(instance, **kwargs)
            return data

    def swagger_get_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.swagger_get_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str accept: Force Accept header value
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method swagger_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `swagger_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/x-yaml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/swagger', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
