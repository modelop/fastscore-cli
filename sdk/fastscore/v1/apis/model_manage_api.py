# coding: utf-8

"""
    FastScore API (proxy)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ModelManageApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def active_sensor_attach(self, instance, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_attach(instance, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param object desc: sensor descriptor (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_attach_with_http_info(instance, desc, **kwargs)
        else:
            (data) = self.active_sensor_attach_with_http_info(instance, desc, **kwargs)
            return data

    def active_sensor_attach_with_http_info(self, instance, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_attach_with_http_info(instance, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param object desc: sensor descriptor (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_attach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_attach`")
        # verify the required parameter 'desc' is set
        if ('desc' not in params) or (params['desc'] is None):
            raise ValueError("Missing the required parameter `desc` when calling `active_sensor_attach`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'desc' in params:
            body_params = params['desc']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_available(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_available(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_available_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_sensor_available_with_http_info(instance, **kwargs)
            return data

    def active_sensor_available_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_available_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_available" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_available`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor/available', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_describe(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_describe(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: The identifier of the sensor connection (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_describe_with_http_info(instance, tap_id, **kwargs)
        else:
            (data) = self.active_sensor_describe_with_http_info(instance, tap_id, **kwargs)
            return data

    def active_sensor_describe_with_http_info(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_describe_with_http_info(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: The identifier of the sensor connection (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'tap_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_describe" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_describe`")
        # verify the required parameter 'tap_id' is set
        if ('tap_id' not in params) or (params['tap_id'] is None):
            raise ValueError("Missing the required parameter `tap_id` when calling `active_sensor_describe`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'tap_id' in params:
            path_params['tap-id'] = params['tap_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor/{tap-id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_detach(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_detach(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: The identifier of the sensor connection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_detach_with_http_info(instance, tap_id, **kwargs)
        else:
            (data) = self.active_sensor_detach_with_http_info(instance, tap_id, **kwargs)
            return data

    def active_sensor_detach_with_http_info(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_detach_with_http_info(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: The identifier of the sensor connection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'tap_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_detach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_detach`")
        # verify the required parameter 'tap_id' is set
        if ('tap_id' not in params) or (params['tap_id'] is None):
            raise ValueError("Missing the required parameter `tap_id` when calling `active_sensor_detach`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'tap_id' in params:
            path_params['tap-id'] = params['tap_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor/{tap-id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_list(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_list(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[InlineResponse200]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_list_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_sensor_list_with_http_info(instance, **kwargs)
            return data

    def active_sensor_list_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_list_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[InlineResponse200]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_list`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/control/sensor', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[InlineResponse200]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def attachment_delete(self, instance, model, attachment, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attachment_delete(instance, model, attachment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str attachment: attachment name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.attachment_delete_with_http_info(instance, model, attachment, **kwargs)
        else:
            (data) = self.attachment_delete_with_http_info(instance, model, attachment, **kwargs)
            return data

    def attachment_delete_with_http_info(self, instance, model, attachment, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attachment_delete_with_http_info(instance, model, attachment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str attachment: attachment name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model', 'attachment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `attachment_delete`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `attachment_delete`")
        # verify the required parameter 'attachment' is set
        if ('attachment' not in params) or (params['attachment'] is None):
            raise ValueError("Missing the required parameter `attachment` when calling `attachment_delete`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']
        if 'attachment' in params:
            path_params['attachment'] = params['attachment']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}/attachment/{attachment}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def attachment_get(self, instance, model, attachment, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attachment_get(instance, model, attachment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str attachment: attachment name (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.attachment_get_with_http_info(instance, model, attachment, **kwargs)
        else:
            (data) = self.attachment_get_with_http_info(instance, model, attachment, **kwargs)
            return data

    def attachment_get_with_http_info(self, instance, model, attachment, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attachment_get_with_http_info(instance, model, attachment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str attachment: attachment name (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model', 'attachment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `attachment_get`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `attachment_get`")
        # verify the required parameter 'attachment' is set
        if ('attachment' not in params) or (params['attachment'] is None):
            raise ValueError("Missing the required parameter `attachment` when calling `attachment_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']
        if 'attachment' in params:
            path_params['attachment'] = params['attachment']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/zip', 'application/gzip'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}/attachment/{attachment}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='file',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def attachment_head(self, instance, model, attachment, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attachment_head(instance, model, attachment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str attachment: attachment name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.attachment_head_with_http_info(instance, model, attachment, **kwargs)
        else:
            (data) = self.attachment_head_with_http_info(instance, model, attachment, **kwargs)
            return data

    def attachment_head_with_http_info(self, instance, model, attachment, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attachment_head_with_http_info(instance, model, attachment, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str attachment: attachment name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model', 'attachment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment_head" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `attachment_head`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `attachment_head`")
        # verify the required parameter 'attachment' is set
        if ('attachment' not in params) or (params['attachment'] is None):
            raise ValueError("Missing the required parameter `attachment` when calling `attachment_head`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']
        if 'attachment' in params:
            path_params['attachment'] = params['attachment']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}/attachment/{attachment}', 'HEAD',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def attachment_list(self, instance, model, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attachment_list(instance, model, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.attachment_list_with_http_info(instance, model, **kwargs)
        else:
            (data) = self.attachment_list_with_http_info(instance, model, **kwargs)
            return data

    def attachment_list_with_http_info(self, instance, model, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attachment_list_with_http_info(instance, model, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `attachment_list`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `attachment_list`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}/attachment', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def attachment_put(self, instance, model, attachment, data, content_type, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attachment_put(instance, model, attachment, data, content_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str attachment: attachment name (required)
        :param str data: attachment data (required)
        :param str content_type: attachment MIME type (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.attachment_put_with_http_info(instance, model, attachment, data, content_type, **kwargs)
        else:
            (data) = self.attachment_put_with_http_info(instance, model, attachment, data, content_type, **kwargs)
            return data

    def attachment_put_with_http_info(self, instance, model, attachment, data, content_type, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.attachment_put_with_http_info(instance, model, attachment, data, content_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str attachment: attachment name (required)
        :param str data: attachment data (required)
        :param str content_type: attachment MIME type (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model', 'attachment', 'data', 'content_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `attachment_put`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `attachment_put`")
        # verify the required parameter 'attachment' is set
        if ('attachment' not in params) or (params['attachment'] is None):
            raise ValueError("Missing the required parameter `attachment` when calling `attachment_put`")
        # verify the required parameter 'data' is set
        if ('data' not in params) or (params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `attachment_put`")
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params) or (params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `attachment_put`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']
        if 'attachment' in params:
            path_params['attachment'] = params['attachment']

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}/attachment/{attachment}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def health_get(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.health_get(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: HealthInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.health_get_with_http_info(instance, **kwargs)
        else:
            (data) = self.health_get_with_http_info(instance, **kwargs)
            return data

    def health_get_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.health_get_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: HealthInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method health_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `health_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/health', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HealthInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def model_delete(self, instance, model, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.model_delete(instance, model, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.model_delete_with_http_info(instance, model, **kwargs)
        else:
            (data) = self.model_delete_with_http_info(instance, model, **kwargs)
            return data

    def model_delete_with_http_info(self, instance, model, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.model_delete_with_http_info(instance, model, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method model_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `model_delete`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `model_delete`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def model_get(self, instance, model, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.model_get(instance, model, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.model_get_with_http_info(instance, model, **kwargs)
        else:
            (data) = self.model_get_with_http_info(instance, model, **kwargs)
            return data

    def model_get_with_http_info(self, instance, model, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.model_get_with_http_info(instance, model, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method model_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `model_get`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `model_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def model_list(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.model_list(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str _return: A comma-separated list of fields to return
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.model_list_with_http_info(instance, **kwargs)
        else:
            (data) = self.model_list_with_http_info(instance, **kwargs)
            return data

    def model_list_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.model_list_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str _return: A comma-separated list of fields to return
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', '_return']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method model_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `model_list`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []
        if '_return' in params:
            query_params.append(('return', params['_return']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[object]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def model_put(self, instance, model, source, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.model_put(instance, model, source, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str source: The model source (required)
        :param str content_type: model MIME type
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.model_put_with_http_info(instance, model, source, **kwargs)
        else:
            (data) = self.model_put_with_http_info(instance, model, source, **kwargs)
            return data

    def model_put_with_http_info(self, instance, model, source, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.model_put_with_http_info(instance, model, source, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str source: The model source (required)
        :param str content_type: model MIME type
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model', 'source', 'content_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method model_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `model_put`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `model_put`")
        # verify the required parameter 'source' is set
        if ('source' not in params) or (params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `model_put`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']

        query_params = []

        header_params = {}
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'source' in params:
            body_params = params['source']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def schema_delete(self, instance, schema, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.schema_delete(instance, schema, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str schema: The name of the schema (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.schema_delete_with_http_info(instance, schema, **kwargs)
        else:
            (data) = self.schema_delete_with_http_info(instance, schema, **kwargs)
            return data

    def schema_delete_with_http_info(self, instance, schema, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.schema_delete_with_http_info(instance, schema, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str schema: The name of the schema (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'schema']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schema_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `schema_delete`")
        # verify the required parameter 'schema' is set
        if ('schema' not in params) or (params['schema'] is None):
            raise ValueError("Missing the required parameter `schema` when calling `schema_delete`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'schema' in params:
            path_params['schema'] = params['schema']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/schema/{schema}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def schema_get(self, instance, schema, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.schema_get(instance, schema, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str schema: The name of the schema (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.schema_get_with_http_info(instance, schema, **kwargs)
        else:
            (data) = self.schema_get_with_http_info(instance, schema, **kwargs)
            return data

    def schema_get_with_http_info(self, instance, schema, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.schema_get_with_http_info(instance, schema, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str schema: The name of the schema (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'schema']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schema_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `schema_get`")
        # verify the required parameter 'schema' is set
        if ('schema' not in params) or (params['schema'] is None):
            raise ValueError("Missing the required parameter `schema` when calling `schema_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'schema' in params:
            path_params['schema'] = params['schema']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/schema/{schema}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def schema_list(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.schema_list(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.schema_list_with_http_info(instance, **kwargs)
        else:
            (data) = self.schema_list_with_http_info(instance, **kwargs)
            return data

    def schema_list_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.schema_list_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schema_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `schema_list`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/schema', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def schema_put(self, instance, schema, source, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.schema_put(instance, schema, source, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str schema: The name of the schema (required)
        :param object source: The schema source (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.schema_put_with_http_info(instance, schema, source, **kwargs)
        else:
            (data) = self.schema_put_with_http_info(instance, schema, source, **kwargs)
            return data

    def schema_put_with_http_info(self, instance, schema, source, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.schema_put_with_http_info(instance, schema, source, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str schema: The name of the schema (required)
        :param object source: The schema source (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'schema', 'source']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schema_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `schema_put`")
        # verify the required parameter 'schema' is set
        if ('schema' not in params) or (params['schema'] is None):
            raise ValueError("Missing the required parameter `schema` when calling `schema_put`")
        # verify the required parameter 'source' is set
        if ('source' not in params) or (params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `schema_put`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'schema' in params:
            path_params['schema'] = params['schema']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'source' in params:
            body_params = params['source']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/schema/{schema}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def sensor_delete(self, instance, sensor, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sensor_delete(instance, sensor, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str sensor: The name of the sensor (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sensor_delete_with_http_info(instance, sensor, **kwargs)
        else:
            (data) = self.sensor_delete_with_http_info(instance, sensor, **kwargs)
            return data

    def sensor_delete_with_http_info(self, instance, sensor, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sensor_delete_with_http_info(instance, sensor, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str sensor: The name of the sensor (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'sensor']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sensor_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `sensor_delete`")
        # verify the required parameter 'sensor' is set
        if ('sensor' not in params) or (params['sensor'] is None):
            raise ValueError("Missing the required parameter `sensor` when calling `sensor_delete`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'sensor' in params:
            path_params['sensor'] = params['sensor']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/sensor/{sensor}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def sensor_get(self, instance, sensor, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sensor_get(instance, sensor, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str sensor: The name of the sensor (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sensor_get_with_http_info(instance, sensor, **kwargs)
        else:
            (data) = self.sensor_get_with_http_info(instance, sensor, **kwargs)
            return data

    def sensor_get_with_http_info(self, instance, sensor, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sensor_get_with_http_info(instance, sensor, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str sensor: The name of the sensor (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'sensor']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sensor_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `sensor_get`")
        # verify the required parameter 'sensor' is set
        if ('sensor' not in params) or (params['sensor'] is None):
            raise ValueError("Missing the required parameter `sensor` when calling `sensor_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'sensor' in params:
            path_params['sensor'] = params['sensor']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/sensor/{sensor}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def sensor_list(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sensor_list(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sensor_list_with_http_info(instance, **kwargs)
        else:
            (data) = self.sensor_list_with_http_info(instance, **kwargs)
            return data

    def sensor_list_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sensor_list_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sensor_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `sensor_list`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/sensor', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def sensor_put(self, instance, sensor, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sensor_put(instance, sensor, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str sensor: The name of the sensor (required)
        :param object desc: The sensor descriptor (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.sensor_put_with_http_info(instance, sensor, desc, **kwargs)
        else:
            (data) = self.sensor_put_with_http_info(instance, sensor, desc, **kwargs)
            return data

    def sensor_put_with_http_info(self, instance, sensor, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.sensor_put_with_http_info(instance, sensor, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str sensor: The name of the sensor (required)
        :param object desc: The sensor descriptor (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'sensor', 'desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sensor_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `sensor_put`")
        # verify the required parameter 'sensor' is set
        if ('sensor' not in params) or (params['sensor'] is None):
            raise ValueError("Missing the required parameter `sensor` when calling `sensor_put`")
        # verify the required parameter 'desc' is set
        if ('desc' not in params) or (params['desc'] is None):
            raise ValueError("Missing the required parameter `desc` when calling `sensor_put`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'sensor' in params:
            path_params['sensor'] = params['sensor']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'desc' in params:
            body_params = params['desc']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/sensor/{sensor}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def snapshot_delete(self, instance, model, snap_id_prefix, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.snapshot_delete(instance, model, snap_id_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str snap_id_prefix: The (prefix of the id ) of the snapshot (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.snapshot_delete_with_http_info(instance, model, snap_id_prefix, **kwargs)
        else:
            (data) = self.snapshot_delete_with_http_info(instance, model, snap_id_prefix, **kwargs)
            return data

    def snapshot_delete_with_http_info(self, instance, model, snap_id_prefix, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.snapshot_delete_with_http_info(instance, model, snap_id_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str snap_id_prefix: The (prefix of the id ) of the snapshot (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model', 'snap_id_prefix']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshot_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `snapshot_delete`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `snapshot_delete`")
        # verify the required parameter 'snap_id_prefix' is set
        if ('snap_id_prefix' not in params) or (params['snap_id_prefix'] is None):
            raise ValueError("Missing the required parameter `snap_id_prefix` when calling `snapshot_delete`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']
        if 'snap_id_prefix' in params:
            path_params['snap-id-prefix'] = params['snap_id_prefix']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}/snapshot/{snap-id-prefix}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def snapshot_get(self, instance, model, snap_id_prefix, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.snapshot_get(instance, model, snap_id_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str snap_id_prefix: The (prefix of the id ) of the snapshot (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.snapshot_get_with_http_info(instance, model, snap_id_prefix, **kwargs)
        else:
            (data) = self.snapshot_get_with_http_info(instance, model, snap_id_prefix, **kwargs)
            return data

    def snapshot_get_with_http_info(self, instance, model, snap_id_prefix, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.snapshot_get_with_http_info(instance, model, snap_id_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str snap_id_prefix: The (prefix of the id ) of the snapshot (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model', 'snap_id_prefix']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshot_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `snapshot_get`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `snapshot_get`")
        # verify the required parameter 'snap_id_prefix' is set
        if ('snap_id_prefix' not in params) or (params['snap_id_prefix'] is None):
            raise ValueError("Missing the required parameter `snap_id_prefix` when calling `snapshot_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']
        if 'snap_id_prefix' in params:
            path_params['snap-id-prefix'] = params['snap_id_prefix']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['multipart/mixed'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}/snapshot/{snap-id-prefix}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def snapshot_get_contents(self, instance, model, snap_id_prefix, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.snapshot_get_contents(instance, model, snap_id_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str snap_id_prefix: The (prefix of the id ) of the snapshot (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.snapshot_get_contents_with_http_info(instance, model, snap_id_prefix, **kwargs)
        else:
            (data) = self.snapshot_get_contents_with_http_info(instance, model, snap_id_prefix, **kwargs)
            return data

    def snapshot_get_contents_with_http_info(self, instance, model, snap_id_prefix, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.snapshot_get_contents_with_http_info(instance, model, snap_id_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str snap_id_prefix: The (prefix of the id ) of the snapshot (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model', 'snap_id_prefix']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshot_get_contents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `snapshot_get_contents`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `snapshot_get_contents`")
        # verify the required parameter 'snap_id_prefix' is set
        if ('snap_id_prefix' not in params) or (params['snap_id_prefix'] is None):
            raise ValueError("Missing the required parameter `snap_id_prefix` when calling `snapshot_get_contents`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']
        if 'snap_id_prefix' in params:
            path_params['snap-id-prefix'] = params['snap_id_prefix']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}/snapshot/{snap-id-prefix}/contents', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='file',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def snapshot_get_metadata(self, instance, model, snap_id_prefix, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.snapshot_get_metadata(instance, model, snap_id_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str snap_id_prefix: The (prefix of the id ) of the snapshot (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.snapshot_get_metadata_with_http_info(instance, model, snap_id_prefix, **kwargs)
        else:
            (data) = self.snapshot_get_metadata_with_http_info(instance, model, snap_id_prefix, **kwargs)
            return data

    def snapshot_get_metadata_with_http_info(self, instance, model, snap_id_prefix, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.snapshot_get_metadata_with_http_info(instance, model, snap_id_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str snap_id_prefix: The (prefix of the id ) of the snapshot (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model', 'snap_id_prefix']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshot_get_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `snapshot_get_metadata`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `snapshot_get_metadata`")
        # verify the required parameter 'snap_id_prefix' is set
        if ('snap_id_prefix' not in params) or (params['snap_id_prefix'] is None):
            raise ValueError("Missing the required parameter `snap_id_prefix` when calling `snapshot_get_metadata`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']
        if 'snap_id_prefix' in params:
            path_params['snap-id-prefix'] = params['snap_id_prefix']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}/snapshot/{snap-id-prefix}/metadata', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def snapshot_list(self, instance, model, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.snapshot_list(instance, model, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param int count: The maximum number of items to return
        :param str date_range: The range of snapshot dates, e.g. 2017-04-11--2017-04-13
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.snapshot_list_with_http_info(instance, model, **kwargs)
        else:
            (data) = self.snapshot_list_with_http_info(instance, model, **kwargs)
            return data

    def snapshot_list_with_http_info(self, instance, model, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.snapshot_list_with_http_info(instance, model, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param int count: The maximum number of items to return
        :param str date_range: The range of snapshot dates, e.g. 2017-04-11--2017-04-13
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model', 'count', 'date_range']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshot_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `snapshot_list`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `snapshot_list`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))
        if 'date_range' in params:
            query_params.append(('date-range', params['date_range']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}/snapshot', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[object]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def snapshot_put(self, instance, model, snap_id_prefix, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.snapshot_put(instance, model, snap_id_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str snap_id_prefix: The (prefix of the id ) of the snapshot (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.snapshot_put_with_http_info(instance, model, snap_id_prefix, **kwargs)
        else:
            (data) = self.snapshot_put_with_http_info(instance, model, snap_id_prefix, **kwargs)
            return data

    def snapshot_put_with_http_info(self, instance, model, snap_id_prefix, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.snapshot_put_with_http_info(instance, model, snap_id_prefix, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str model: model name (required)
        :param str snap_id_prefix: The (prefix of the id ) of the snapshot (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'model', 'snap_id_prefix']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshot_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `snapshot_put`")
        # verify the required parameter 'model' is set
        if ('model' not in params) or (params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `snapshot_put`")
        # verify the required parameter 'snap_id_prefix' is set
        if ('snap_id_prefix' not in params) or (params['snap_id_prefix'] is None):
            raise ValueError("Missing the required parameter `snap_id_prefix` when calling `snapshot_put`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'model' in params:
            path_params['model'] = params['model']
        if 'snap_id_prefix' in params:
            path_params['snap-id-prefix'] = params['snap_id_prefix']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/mixed', 'multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/model/{model}/snapshot/{snap-id-prefix}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_delete(self, instance, stream, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_delete(instance, stream, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str stream: The name of the stream (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_delete_with_http_info(instance, stream, **kwargs)
        else:
            (data) = self.stream_delete_with_http_info(instance, stream, **kwargs)
            return data

    def stream_delete_with_http_info(self, instance, stream, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_delete_with_http_info(instance, stream, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str stream: The name of the stream (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'stream']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `stream_delete`")
        # verify the required parameter 'stream' is set
        if ('stream' not in params) or (params['stream'] is None):
            raise ValueError("Missing the required parameter `stream` when calling `stream_delete`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'stream' in params:
            path_params['stream'] = params['stream']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/stream/{stream}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_get(self, instance, stream, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_get(instance, stream, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str stream: The name of the stream (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_get_with_http_info(instance, stream, **kwargs)
        else:
            (data) = self.stream_get_with_http_info(instance, stream, **kwargs)
            return data

    def stream_get_with_http_info(self, instance, stream, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_get_with_http_info(instance, stream, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str stream: The name of the stream (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'stream']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `stream_get`")
        # verify the required parameter 'stream' is set
        if ('stream' not in params) or (params['stream'] is None):
            raise ValueError("Missing the required parameter `stream` when calling `stream_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'stream' in params:
            path_params['stream'] = params['stream']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/stream/{stream}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_list(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_list(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_list_with_http_info(instance, **kwargs)
        else:
            (data) = self.stream_list_with_http_info(instance, **kwargs)
            return data

    def stream_list_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_list_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `stream_list`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/stream', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stream_put(self, instance, stream, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_put(instance, stream, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str stream: The name of the stream (required)
        :param object desc: The stream descriptor (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stream_put_with_http_info(instance, stream, desc, **kwargs)
        else:
            (data) = self.stream_put_with_http_info(instance, stream, desc, **kwargs)
            return data

    def stream_put_with_http_info(self, instance, stream, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stream_put_with_http_info(instance, stream, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str stream: The name of the stream (required)
        :param object desc: The stream descriptor (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'stream', 'desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `stream_put`")
        # verify the required parameter 'stream' is set
        if ('stream' not in params) or (params['stream'] is None):
            raise ValueError("Missing the required parameter `stream` when calling `stream_put`")
        # verify the required parameter 'desc' is set
        if ('desc' not in params) or (params['desc'] is None):
            raise ValueError("Missing the required parameter `desc` when calling `stream_put`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'stream' in params:
            path_params['stream'] = params['stream']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'desc' in params:
            body_params = params['desc']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/stream/{stream}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def swagger_get(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.swagger_get(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str accept: Force Accept header value
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.swagger_get_with_http_info(instance, **kwargs)
        else:
            (data) = self.swagger_get_with_http_info(instance, **kwargs)
            return data

    def swagger_get_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.swagger_get_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param str accept: Force Accept header value
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'accept']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method swagger_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `swagger_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}
        if 'accept' in params:
            header_params['Accept'] = params['accept']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/x-yaml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/1/swagger', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
