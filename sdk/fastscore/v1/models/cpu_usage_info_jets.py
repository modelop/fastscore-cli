# coding: utf-8

"""
    FastScore API (proxy)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CpuUsageInfoJets(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input_records': 'int',
        'output_records': 'int',
        'user_time': 'float',
        'kernel_time': 'float',
        'model_time': 'float'
    }

    attribute_map = {
        'input_records': 'input_records',
        'output_records': 'output_records',
        'user_time': 'user_time',
        'kernel_time': 'kernel_time',
        'model_time': 'model_time'
    }

    def __init__(self, input_records=None, output_records=None, user_time=None, kernel_time=None, model_time=None):
        """
        CpuUsageInfoJets - a model defined in Swagger
        """

        self._input_records = None
        self._output_records = None
        self._user_time = None
        self._kernel_time = None
        self._model_time = None

        if input_records is not None:
          self.input_records = input_records
        if output_records is not None:
          self.output_records = output_records
        if user_time is not None:
          self.user_time = user_time
        if kernel_time is not None:
          self.kernel_time = kernel_time
        if model_time is not None:
          self.model_time = model_time

    @property
    def input_records(self):
        """
        Gets the input_records of this CpuUsageInfoJets.

        :return: The input_records of this CpuUsageInfoJets.
        :rtype: int
        """
        return self._input_records

    @input_records.setter
    def input_records(self, input_records):
        """
        Sets the input_records of this CpuUsageInfoJets.

        :param input_records: The input_records of this CpuUsageInfoJets.
        :type: int
        """

        self._input_records = input_records

    @property
    def output_records(self):
        """
        Gets the output_records of this CpuUsageInfoJets.

        :return: The output_records of this CpuUsageInfoJets.
        :rtype: int
        """
        return self._output_records

    @output_records.setter
    def output_records(self, output_records):
        """
        Sets the output_records of this CpuUsageInfoJets.

        :param output_records: The output_records of this CpuUsageInfoJets.
        :type: int
        """

        self._output_records = output_records

    @property
    def user_time(self):
        """
        Gets the user_time of this CpuUsageInfoJets.

        :return: The user_time of this CpuUsageInfoJets.
        :rtype: float
        """
        return self._user_time

    @user_time.setter
    def user_time(self, user_time):
        """
        Sets the user_time of this CpuUsageInfoJets.

        :param user_time: The user_time of this CpuUsageInfoJets.
        :type: float
        """

        self._user_time = user_time

    @property
    def kernel_time(self):
        """
        Gets the kernel_time of this CpuUsageInfoJets.

        :return: The kernel_time of this CpuUsageInfoJets.
        :rtype: float
        """
        return self._kernel_time

    @kernel_time.setter
    def kernel_time(self, kernel_time):
        """
        Sets the kernel_time of this CpuUsageInfoJets.

        :param kernel_time: The kernel_time of this CpuUsageInfoJets.
        :type: float
        """

        self._kernel_time = kernel_time

    @property
    def model_time(self):
        """
        Gets the model_time of this CpuUsageInfoJets.

        :return: The model_time of this CpuUsageInfoJets.
        :rtype: float
        """
        return self._model_time

    @model_time.setter
    def model_time(self, model_time):
        """
        Sets the model_time of this CpuUsageInfoJets.

        :param model_time: The model_time of this CpuUsageInfoJets.
        :type: float
        """

        self._model_time = model_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CpuUsageInfoJets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
