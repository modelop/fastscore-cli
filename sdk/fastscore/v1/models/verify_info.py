# coding: utf-8

"""
    FastScore API (proxy)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VerifyInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'slots': 'list[VerifyInfoSlots]',
        'install_libs': 'list[str]',
        'warn_libs': 'list[str]',
        'attach_libs': 'list[str]',
        'snapshots': 'str'
    }

    attribute_map = {
        'slots': 'slots',
        'install_libs': 'install_libs',
        'warn_libs': 'warn_libs',
        'attach_libs': 'attach_libs',
        'snapshots': 'snapshots'
    }

    def __init__(self, slots=None, install_libs=None, warn_libs=None, attach_libs=None, snapshots=None):
        """
        VerifyInfo - a model defined in Swagger
        """

        self._slots = None
        self._install_libs = None
        self._warn_libs = None
        self._attach_libs = None
        self._snapshots = None

        if slots is not None:
          self.slots = slots
        if install_libs is not None:
          self.install_libs = install_libs
        if warn_libs is not None:
          self.warn_libs = warn_libs
        if attach_libs is not None:
          self.attach_libs = attach_libs
        if snapshots is not None:
          self.snapshots = snapshots

    @property
    def slots(self):
        """
        Gets the slots of this VerifyInfo.

        :return: The slots of this VerifyInfo.
        :rtype: list[VerifyInfoSlots]
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """
        Sets the slots of this VerifyInfo.

        :param slots: The slots of this VerifyInfo.
        :type: list[VerifyInfoSlots]
        """

        self._slots = slots

    @property
    def install_libs(self):
        """
        Gets the install_libs of this VerifyInfo.

        :return: The install_libs of this VerifyInfo.
        :rtype: list[str]
        """
        return self._install_libs

    @install_libs.setter
    def install_libs(self, install_libs):
        """
        Sets the install_libs of this VerifyInfo.

        :param install_libs: The install_libs of this VerifyInfo.
        :type: list[str]
        """

        self._install_libs = install_libs

    @property
    def warn_libs(self):
        """
        Gets the warn_libs of this VerifyInfo.

        :return: The warn_libs of this VerifyInfo.
        :rtype: list[str]
        """
        return self._warn_libs

    @warn_libs.setter
    def warn_libs(self, warn_libs):
        """
        Sets the warn_libs of this VerifyInfo.

        :param warn_libs: The warn_libs of this VerifyInfo.
        :type: list[str]
        """

        self._warn_libs = warn_libs

    @property
    def attach_libs(self):
        """
        Gets the attach_libs of this VerifyInfo.

        :return: The attach_libs of this VerifyInfo.
        :rtype: list[str]
        """
        return self._attach_libs

    @attach_libs.setter
    def attach_libs(self, attach_libs):
        """
        Sets the attach_libs of this VerifyInfo.

        :param attach_libs: The attach_libs of this VerifyInfo.
        :type: list[str]
        """

        self._attach_libs = attach_libs

    @property
    def snapshots(self):
        """
        Gets the snapshots of this VerifyInfo.

        :return: The snapshots of this VerifyInfo.
        :rtype: str
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """
        Sets the snapshots of this VerifyInfo.

        :param snapshots: The snapshots of this VerifyInfo.
        :type: str
        """

        self._snapshots = snapshots

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VerifyInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
