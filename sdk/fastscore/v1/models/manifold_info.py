# coding: utf-8

"""
    FastScore API (proxy)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ManifoldInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'ManifoldInfoModel',
        'slots': 'list[ManifoldInfoSlots]',
        'jets': 'list[ManifoldInfoJets]',
        'snapshots': 'str',
        'state': 'str'
    }

    attribute_map = {
        'model': 'model',
        'slots': 'slots',
        'jets': 'jets',
        'snapshots': 'snapshots',
        'state': 'state'
    }

    def __init__(self, model=None, slots=None, jets=None, snapshots=None, state=None):
        """
        ManifoldInfo - a model defined in Swagger
        """

        self._model = None
        self._slots = None
        self._jets = None
        self._snapshots = None
        self._state = None

        if model is not None:
          self.model = model
        if slots is not None:
          self.slots = slots
        if jets is not None:
          self.jets = jets
        if snapshots is not None:
          self.snapshots = snapshots
        if state is not None:
          self.state = state

    @property
    def model(self):
        """
        Gets the model of this ManifoldInfo.

        :return: The model of this ManifoldInfo.
        :rtype: ManifoldInfoModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this ManifoldInfo.

        :param model: The model of this ManifoldInfo.
        :type: ManifoldInfoModel
        """

        self._model = model

    @property
    def slots(self):
        """
        Gets the slots of this ManifoldInfo.

        :return: The slots of this ManifoldInfo.
        :rtype: list[ManifoldInfoSlots]
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """
        Sets the slots of this ManifoldInfo.

        :param slots: The slots of this ManifoldInfo.
        :type: list[ManifoldInfoSlots]
        """

        self._slots = slots

    @property
    def jets(self):
        """
        Gets the jets of this ManifoldInfo.

        :return: The jets of this ManifoldInfo.
        :rtype: list[ManifoldInfoJets]
        """
        return self._jets

    @jets.setter
    def jets(self, jets):
        """
        Sets the jets of this ManifoldInfo.

        :param jets: The jets of this ManifoldInfo.
        :type: list[ManifoldInfoJets]
        """

        self._jets = jets

    @property
    def snapshots(self):
        """
        Gets the snapshots of this ManifoldInfo.

        :return: The snapshots of this ManifoldInfo.
        :rtype: str
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """
        Sets the snapshots of this ManifoldInfo.

        :param snapshots: The snapshots of this ManifoldInfo.
        :type: str
        """

        self._snapshots = snapshots

    @property
    def state(self):
        """
        Gets the state of this ManifoldInfo.

        :return: The state of this ManifoldInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ManifoldInfo.

        :param state: The state of this ManifoldInfo.
        :type: str
        """

        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ManifoldInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
