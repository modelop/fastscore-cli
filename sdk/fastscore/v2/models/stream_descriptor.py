# coding: utf-8

"""
    FastScore API (proxy)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StreamDescriptor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'description': 'str',
        'loop': 'bool',
        'skip_to': 'int',
        'encoding': 'str'
    }

    attribute_map = {
        'version': 'Version',
        'description': 'Description',
        'loop': 'Loop',
        'skip_to': 'SkipTo',
        'encoding': 'Encoding'
    }

    def __init__(self, version=None, description=None, loop=None, skip_to=None, encoding=None):
        """
        StreamDescriptor - a model defined in Swagger
        """

        self._version = None
        self._description = None
        self._loop = None
        self._skip_to = None
        self._encoding = None

        if version is not None:
          self.version = version
        if description is not None:
          self.description = description
        if loop is not None:
          self.loop = loop
        if skip_to is not None:
          self.skip_to = skip_to
        if encoding is not None:
          self.encoding = encoding

    @property
    def version(self):
        """
        Gets the version of this StreamDescriptor.

        :return: The version of this StreamDescriptor.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this StreamDescriptor.

        :param version: The version of this StreamDescriptor.
        :type: str
        """

        self._version = version

    @property
    def description(self):
        """
        Gets the description of this StreamDescriptor.

        :return: The description of this StreamDescriptor.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this StreamDescriptor.

        :param description: The description of this StreamDescriptor.
        :type: str
        """

        self._description = description

    @property
    def loop(self):
        """
        Gets the loop of this StreamDescriptor.

        :return: The loop of this StreamDescriptor.
        :rtype: bool
        """
        return self._loop

    @loop.setter
    def loop(self, loop):
        """
        Sets the loop of this StreamDescriptor.

        :param loop: The loop of this StreamDescriptor.
        :type: bool
        """

        self._loop = loop

    @property
    def skip_to(self):
        """
        Gets the skip_to of this StreamDescriptor.

        :return: The skip_to of this StreamDescriptor.
        :rtype: int
        """
        return self._skip_to

    @skip_to.setter
    def skip_to(self, skip_to):
        """
        Sets the skip_to of this StreamDescriptor.

        :param skip_to: The skip_to of this StreamDescriptor.
        :type: int
        """

        self._skip_to = skip_to

    @property
    def encoding(self):
        """
        Gets the encoding of this StreamDescriptor.

        :return: The encoding of this StreamDescriptor.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """
        Sets the encoding of this StreamDescriptor.

        :param encoding: The encoding of this StreamDescriptor.
        :type: str
        """

        self._encoding = encoding

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StreamDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
