# coding: utf-8

"""
    FastScore API (proxy)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SlotInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'slot': 'int',
        'schema': 'object',
        'recordsets': 'bool',
        'action': 'str'
    }

    attribute_map = {
        'slot': 'slot',
        'schema': 'schema',
        'recordsets': 'recordsets',
        'action': 'action'
    }

    def __init__(self, slot=None, schema=None, recordsets=None, action=None):
        """
        SlotInfo - a model defined in Swagger
        """

        self._slot = None
        self._schema = None
        self._recordsets = None
        self._action = None

        if slot is not None:
          self.slot = slot
        if schema is not None:
          self.schema = schema
        if recordsets is not None:
          self.recordsets = recordsets
        if action is not None:
          self.action = action

    @property
    def slot(self):
        """
        Gets the slot of this SlotInfo.

        :return: The slot of this SlotInfo.
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """
        Sets the slot of this SlotInfo.

        :param slot: The slot of this SlotInfo.
        :type: int
        """

        self._slot = slot

    @property
    def schema(self):
        """
        Gets the schema of this SlotInfo.

        :return: The schema of this SlotInfo.
        :rtype: object
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """
        Sets the schema of this SlotInfo.

        :param schema: The schema of this SlotInfo.
        :type: object
        """

        self._schema = schema

    @property
    def recordsets(self):
        """
        Gets the recordsets of this SlotInfo.

        :return: The recordsets of this SlotInfo.
        :rtype: bool
        """
        return self._recordsets

    @recordsets.setter
    def recordsets(self, recordsets):
        """
        Sets the recordsets of this SlotInfo.

        :param recordsets: The recordsets of this SlotInfo.
        :type: bool
        """

        self._recordsets = recordsets

    @property
    def action(self):
        """
        Gets the action of this SlotInfo.

        :return: The action of this SlotInfo.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this SlotInfo.

        :param action: The action of this SlotInfo.
        :type: str
        """

        self._action = action

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SlotInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
