# coding: utf-8

"""
    FastScore API (proxy)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SensorDescriptor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'tap': 'str',
        'description': 'str',
        'filter': 'SensorDescriptorFilter',
        'report': 'SensorDescriptorReport'
    }

    attribute_map = {
        'version': 'Version',
        'tap': 'Tap',
        'description': 'Description',
        'filter': 'Filter',
        'report': 'Report'
    }

    def __init__(self, version=None, tap=None, description=None, filter=None, report=None):
        """
        SensorDescriptor - a model defined in Swagger
        """

        self._version = None
        self._tap = None
        self._description = None
        self._filter = None
        self._report = None

        if version is not None:
          self.version = version
        if tap is not None:
          self.tap = tap
        if description is not None:
          self.description = description
        if filter is not None:
          self.filter = filter
        if report is not None:
          self.report = report

    @property
    def version(self):
        """
        Gets the version of this SensorDescriptor.

        :return: The version of this SensorDescriptor.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this SensorDescriptor.

        :param version: The version of this SensorDescriptor.
        :type: str
        """

        self._version = version

    @property
    def tap(self):
        """
        Gets the tap of this SensorDescriptor.

        :return: The tap of this SensorDescriptor.
        :rtype: str
        """
        return self._tap

    @tap.setter
    def tap(self, tap):
        """
        Sets the tap of this SensorDescriptor.

        :param tap: The tap of this SensorDescriptor.
        :type: str
        """

        self._tap = tap

    @property
    def description(self):
        """
        Gets the description of this SensorDescriptor.

        :return: The description of this SensorDescriptor.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SensorDescriptor.

        :param description: The description of this SensorDescriptor.
        :type: str
        """

        self._description = description

    @property
    def filter(self):
        """
        Gets the filter of this SensorDescriptor.

        :return: The filter of this SensorDescriptor.
        :rtype: SensorDescriptorFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this SensorDescriptor.

        :param filter: The filter of this SensorDescriptor.
        :type: SensorDescriptorFilter
        """

        self._filter = filter

    @property
    def report(self):
        """
        Gets the report of this SensorDescriptor.

        :return: The report of this SensorDescriptor.
        :rtype: SensorDescriptorReport
        """
        return self._report

    @report.setter
    def report(self, report):
        """
        Sets the report of this SensorDescriptor.

        :param report: The report of this SensorDescriptor.
        :type: SensorDescriptorReport
        """

        self._report = report

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SensorDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
