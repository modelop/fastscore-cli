# coding: utf-8

"""
    FastScore API (proxy)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ConnectApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def active_sensor_install(self, instance, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_install(instance, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param SensorDescriptor desc: sensor descriptor (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_install_with_http_info(instance, desc, **kwargs)
        else:
            (data) = self.active_sensor_install_with_http_info(instance, desc, **kwargs)
            return data

    def active_sensor_install_with_http_info(self, instance, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_install_with_http_info(instance, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param SensorDescriptor desc: sensor descriptor (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_install" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_install`")
        # verify the required parameter 'desc' is set
        if ('desc' not in params) or (params['desc'] is None):
            raise ValueError("Missing the required parameter `desc` when calling `active_sensor_install`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'desc' in params:
            body_params = params['desc']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/sensor', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_list(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_list(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[ActiveSensorInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_list_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_sensor_list_with_http_info(instance, **kwargs)
            return data

    def active_sensor_list_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_list_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[ActiveSensorInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_list`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/sensor', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ActiveSensorInfo]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_points(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_points(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_points_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_sensor_points_with_http_info(instance, **kwargs)
            return data

    def active_sensor_points_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_points_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_points" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_points`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/sensor/points', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_uninstall(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_uninstall(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: installed sensor id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_uninstall_with_http_info(instance, tap_id, **kwargs)
        else:
            (data) = self.active_sensor_uninstall_with_http_info(instance, tap_id, **kwargs)
            return data

    def active_sensor_uninstall_with_http_info(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_uninstall_with_http_info(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: installed sensor id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'tap_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_uninstall" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_uninstall`")
        # verify the required parameter 'tap_id' is set
        if ('tap_id' not in params) or (params['tap_id'] is None):
            raise ValueError("Missing the required parameter `tap_id` when calling `active_sensor_uninstall`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'tap_id' in params:
            path_params['tap-id'] = params['tap_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/sensor/{tap-id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def pneumo_get(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pneumo_get(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.pneumo_get_with_http_info(instance, **kwargs)
        else:
            (data) = self.pneumo_get_with_http_info(instance, **kwargs)
            return data

    def pneumo_get_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.pneumo_get_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pneumo_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `pneumo_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/pneumo', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[object]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
