# coding: utf-8

"""
    FastScore API (proxy)

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.7
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EngineApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def active_model_delete(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_model_delete(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_model_delete_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_model_delete_with_http_info(instance, **kwargs)
            return data

    def active_model_delete_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_model_delete_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_model_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_model_delete`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/model', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_model_get(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_model_get(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: ActiveModelInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_model_get_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_model_get_with_http_info(instance, **kwargs)
            return data

    def active_model_get_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_model_get_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: ActiveModelInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_model_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_model_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/model', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ActiveModelInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_model_scale(self, instance, factor, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_model_scale(instance, factor, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int factor: jet count (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_model_scale_with_http_info(instance, factor, **kwargs)
        else:
            (data) = self.active_model_scale_with_http_info(instance, factor, **kwargs)
            return data

    def active_model_scale_with_http_info(self, instance, factor, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_model_scale_with_http_info(instance, factor, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int factor: jet count (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'factor']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_model_scale" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_model_scale`")
        # verify the required parameter 'factor' is set
        if ('factor' not in params) or (params['factor'] is None):
            raise ValueError("Missing the required parameter `factor` when calling `active_model_scale`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'factor' in params:
            body_params = params['factor']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/model/scale', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_schema_unverify(self, instance, sid, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_schema_unverify(instance, sid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int sid: schema id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_schema_unverify_with_http_info(instance, sid, **kwargs)
        else:
            (data) = self.active_schema_unverify_with_http_info(instance, sid, **kwargs)
            return data

    def active_schema_unverify_with_http_info(self, instance, sid, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_schema_unverify_with_http_info(instance, sid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int sid: schema id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'sid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_schema_unverify" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_schema_unverify`")
        # verify the required parameter 'sid' is set
        if ('sid' not in params) or (params['sid'] is None):
            raise ValueError("Missing the required parameter `sid` when calling `active_schema_unverify`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'sid' in params:
            path_params['sid'] = params['sid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/schema/verify/{sid}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_schema_verify(self, instance, schema, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_schema_verify(instance, schema, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param object schema: Avro schema (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_schema_verify_with_http_info(instance, schema, **kwargs)
        else:
            (data) = self.active_schema_verify_with_http_info(instance, schema, **kwargs)
            return data

    def active_schema_verify_with_http_info(self, instance, schema, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_schema_verify_with_http_info(instance, schema, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param object schema: Avro schema (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'schema']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_schema_verify" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_schema_verify`")
        # verify the required parameter 'schema' is set
        if ('schema' not in params) or (params['schema'] is None):
            raise ValueError("Missing the required parameter `schema` when calling `active_schema_verify`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'schema' in params:
            body_params = params['schema']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/schema/verify', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_schema_verify_data(self, instance, sid, record, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_schema_verify_data(instance, sid, record, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int sid: schema id (required)
        :param Record record: data record to verify (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_schema_verify_data_with_http_info(instance, sid, record, **kwargs)
        else:
            (data) = self.active_schema_verify_data_with_http_info(instance, sid, record, **kwargs)
            return data

    def active_schema_verify_data_with_http_info(self, instance, sid, record, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_schema_verify_data_with_http_info(instance, sid, record, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int sid: schema id (required)
        :param Record record: data record to verify (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'sid', 'record']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_schema_verify_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_schema_verify_data`")
        # verify the required parameter 'sid' is set
        if ('sid' not in params) or (params['sid'] is None):
            raise ValueError("Missing the required parameter `sid` when calling `active_schema_verify_data`")
        # verify the required parameter 'record' is set
        if ('record' not in params) or (params['record'] is None):
            raise ValueError("Missing the required parameter `record` when calling `active_schema_verify_data`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'sid' in params:
            path_params['sid'] = params['sid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'record' in params:
            body_params = params['record']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/schema/verify/{sid}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_install(self, instance, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_install(instance, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param SensorDescriptor desc: sensor descriptor (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_install_with_http_info(instance, desc, **kwargs)
        else:
            (data) = self.active_sensor_install_with_http_info(instance, desc, **kwargs)
            return data

    def active_sensor_install_with_http_info(self, instance, desc, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_install_with_http_info(instance, desc, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param SensorDescriptor desc: sensor descriptor (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'desc']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_install" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_install`")
        # verify the required parameter 'desc' is set
        if ('desc' not in params) or (params['desc'] is None):
            raise ValueError("Missing the required parameter `desc` when calling `active_sensor_install`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'desc' in params:
            body_params = params['desc']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/sensor', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse200',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_list(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_list(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[ActiveSensorInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_list_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_sensor_list_with_http_info(instance, **kwargs)
            return data

    def active_sensor_list_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_list_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[ActiveSensorInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_list`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/sensor', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ActiveSensorInfo]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_points(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_points(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_points_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_sensor_points_with_http_info(instance, **kwargs)
            return data

    def active_sensor_points_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_points_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_points" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_points`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/sensor/points', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_sensor_uninstall(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_uninstall(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: installed sensor id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_sensor_uninstall_with_http_info(instance, tap_id, **kwargs)
        else:
            (data) = self.active_sensor_uninstall_with_http_info(instance, tap_id, **kwargs)
            return data

    def active_sensor_uninstall_with_http_info(self, instance, tap_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_sensor_uninstall_with_http_info(instance, tap_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int tap_id: installed sensor id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'tap_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_sensor_uninstall" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_sensor_uninstall`")
        # verify the required parameter 'tap_id' is set
        if ('tap_id' not in params) or (params['tap_id'] is None):
            raise ValueError("Missing the required parameter `tap_id` when calling `active_sensor_uninstall`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'tap_id' in params:
            path_params['tap-id'] = params['tap_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/sensor/{tap-id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_stream_attach(self, instance, desc, slot, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_stream_attach(instance, desc, slot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param StreamDescriptor desc: The stream descriptor (required)
        :param int slot: stream slot number (required)
        :param bool dry_run: verificaton only
        :param str content_disposition: pass stream name
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_stream_attach_with_http_info(instance, desc, slot, **kwargs)
        else:
            (data) = self.active_stream_attach_with_http_info(instance, desc, slot, **kwargs)
            return data

    def active_stream_attach_with_http_info(self, instance, desc, slot, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_stream_attach_with_http_info(instance, desc, slot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param StreamDescriptor desc: The stream descriptor (required)
        :param int slot: stream slot number (required)
        :param bool dry_run: verificaton only
        :param str content_disposition: pass stream name
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'desc', 'slot', 'dry_run', 'content_disposition']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_stream_attach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_stream_attach`")
        # verify the required parameter 'desc' is set
        if ('desc' not in params) or (params['desc'] is None):
            raise ValueError("Missing the required parameter `desc` when calling `active_stream_attach`")
        # verify the required parameter 'slot' is set
        if ('slot' not in params) or (params['slot'] is None):
            raise ValueError("Missing the required parameter `slot` when calling `active_stream_attach`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'slot' in params:
            path_params['slot'] = params['slot']

        query_params = []
        if 'dry_run' in params:
            query_params.append(('dry-run', params['dry_run']))

        header_params = {}
        if 'content_disposition' in params:
            header_params['Content-Disposition'] = params['content_disposition']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'desc' in params:
            body_params = params['desc']
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/stream/{slot}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_stream_detach(self, instance, slot, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_stream_detach(instance, slot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int slot: stream slot number (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_stream_detach_with_http_info(instance, slot, **kwargs)
        else:
            (data) = self.active_stream_detach_with_http_info(instance, slot, **kwargs)
            return data

    def active_stream_detach_with_http_info(self, instance, slot, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_stream_detach_with_http_info(instance, slot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :param int slot: stream slot number (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance', 'slot']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_stream_detach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_stream_detach`")
        # verify the required parameter 'slot' is set
        if ('slot' not in params) or (params['slot'] is None):
            raise ValueError("Missing the required parameter `slot` when calling `active_stream_detach`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']
        if 'slot' in params:
            path_params['slot'] = params['slot']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/stream/{slot}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def active_stream_list(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_stream_list(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[ActiveStreamInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.active_stream_list_with_http_info(instance, **kwargs)
        else:
            (data) = self.active_stream_list_with_http_info(instance, **kwargs)
            return data

    def active_stream_list_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.active_stream_list_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: list[ActiveStreamInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method active_stream_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `active_stream_list`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/active/stream', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ActiveStreamInfo]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def engine_pause(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.engine_pause(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.engine_pause_with_http_info(instance, **kwargs)
        else:
            (data) = self.engine_pause_with_http_info(instance, **kwargs)
            return data

    def engine_pause_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.engine_pause_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method engine_pause" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `engine_pause`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/engine/pause', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def engine_reset(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.engine_reset(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.engine_reset_with_http_info(instance, **kwargs)
        else:
            (data) = self.engine_reset_with_http_info(instance, **kwargs)
            return data

    def engine_reset_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.engine_reset_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method engine_reset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `engine_reset`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/engine/reset', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def engine_state_get(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.engine_state_get(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.engine_state_get_with_http_info(instance, **kwargs)
        else:
            (data) = self.engine_state_get_with_http_info(instance, **kwargs)
            return data

    def engine_state_get_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.engine_state_get_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method engine_state_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `engine_state_get`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/engine/state', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2001',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def engine_unpause(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.engine_unpause(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.engine_unpause_with_http_info(instance, **kwargs)
        else:
            (data) = self.engine_unpause_with_http_info(instance, **kwargs)
            return data

    def engine_unpause_with_http_info(self, instance, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.engine_unpause_with_http_info(instance, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str instance: instance name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instance']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method engine_unpause" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'instance' is set
        if ('instance' not in params) or (params['instance'] is None):
            raise ValueError("Missing the required parameter `instance` when calling `engine_unpause`")


        collection_formats = {}

        path_params = {}
        if 'instance' in params:
            path_params['instance'] = params['instance']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/{instance}/2/engine/unpause', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
